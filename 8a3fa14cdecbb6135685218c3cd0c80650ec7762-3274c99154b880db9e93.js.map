{"version":3,"file":"8a3fa14cdecbb6135685218c3cd0c80650ec7762-3274c99154b880db9e93.js","mappings":"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","sources":["webpack://catskald-legendary-creatures/./src/components/PageList/index.module.scss","webpack://catskald-legendary-creatures/./src/components/CreaturePage/index.js","webpack://catskald-legendary-creatures/./src/components/CreaturePage/index.module.scss","webpack://catskald-legendary-creatures/./src/components/PageList/index.js","webpack://catskald-legendary-creatures/./src/components/TitlePage/index.module.scss","webpack://catskald-legendary-creatures/./src/components/TitlePage/index.js","webpack://catskald-legendary-creatures/./src/hooks/use-images.js","webpack://catskald-legendary-creatures/./src/utils/image-helpers.js","webpack://catskald-legendary-creatures/./src/utils/url-helpers.js","webpack://catskald-legendary-creatures/./node_modules/path-browserify/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var pageList = \"index-module--pageList--1eu5C\";","import {\r\n  creaturePage__link,\r\n  creaturePage__image,\r\n  creaturePage,\r\n  creaturePage__content,\r\n  creaturePage__title,\r\n  creaturePage__description,\r\n} from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\n\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport { useImages } from \"../../hooks/use-images\";\r\nimport { getImageNameOrDefaultCover } from \"../../utils/image-helpers\";\r\n\r\nconst CreaturePage = (props) => {\r\n  const imagePath = props.image;\r\n\r\n  const imageName = getImageNameOrDefaultCover(imagePath);\r\n  const images = useImages();\r\n  const image = images.find((img) => img.name === imageName);\r\n\r\n  return (\r\n    <LocalizedLink className={creaturePage__link} to={props.slug}>\r\n      <section className={creaturePage}>\r\n        <GatsbyImage\r\n          className={creaturePage__image}\r\n          image={image.image}\r\n          alt={props.title}\r\n        />\r\n        <div className={creaturePage__content}>\r\n          <h3 className={creaturePage__title}>{props.title}</h3>\r\n          <p className={creaturePage__description}>{props.description}</p>\r\n        </div>\r\n      </section>\r\n    </LocalizedLink>\r\n  );\r\n};\r\n\r\nCreaturePage.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CreaturePage;\r\n","// extracted by mini-css-extract-plugin\nexport var creaturePage = \"index-module--creaturePage--kikSd\";\nexport var creaturePage__content = \"index-module--creaturePage__content--3poMV\";\nexport var creaturePage__description = \"index-module--creaturePage__description--3cU32\";\nexport var creaturePage__image = \"index-module--creaturePage__image--20btu\";\nexport var creaturePage__link = \"index-module--creaturePage__link--qXnZn\";\nexport var creaturePage__title = \"index-module--creaturePage__title--Xy2O7\";","import { pageList } from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CreaturePage from \"../CreaturePage\";\r\nimport { LocaleContext } from \"../Layout\";\r\nimport { getCreaturesPath } from \"../../utils/url-helpers\";\r\n\r\nconst PageList = (props) => {\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  return (\r\n    <section className={pageList}>\r\n      {props.pages.map(\r\n        ({\r\n          node: {\r\n            frontmatter: { date, description, title, image },\r\n            fields: { slug },\r\n          },\r\n        }) => (\r\n          <CreaturePage\r\n            key={slug}\r\n            slug={`${getCreaturesPath(language.code)}/${slug}`}\r\n            date={date}\r\n            title={title}\r\n            description={description}\r\n            image={image}\r\n          />\r\n        ),\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nPageList.propTypes = {\r\n  pages: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default PageList;\r\n","// extracted by mini-css-extract-plugin\nexport var title = \"index-module--title--2qFtM\";","import { title } from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TitlePage = (props) => {\r\n  return <h1 className={title}>{props.text}</h1>;\r\n};\r\n\r\nTitlePage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TitlePage;\r\n","import { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nexport const useImages = () => {\r\n  const { listImages } = useStaticQuery(\r\n    graphql`\r\n      {\r\n        listImages: allFile(\r\n          filter: { sourceInstanceName: { eq: \"image-assets\" } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              childImageSharp {\r\n                image: gatsbyImageData(layout: CONSTRAINED)\r\n                metadata: parent {\r\n                  ... on File {\r\n                    relativePath\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  );\r\n  return listImages.edges.map((edge) => ({\r\n    name: edge.node.childImageSharp.metadata.relativePath,\r\n    image: edge.node.childImageSharp.image,\r\n  }));\r\n};\r\n","exports.getImageNameOrDefaultCover = (imagePath) =>\r\n  imagePath ? imagePath.split(\"\\\\\").pop().split(\"/\").pop() : \"cover.jpg\";\r\n","const localizedNavigation = require(\"../i18n/navigation\");\r\nconst path = require(\"path\");\r\n\r\nconst pagePath = (pageIndex) => (pageIndex >= 1 ? `/${pageIndex}` : \"\");\r\n\r\nconst getTagsPath = (languageCode) =>\r\n  localizedNavigation.pages.tags[languageCode].path;\r\nconst getCreaturesPath = (languageCode) =>\r\n  localizedNavigation.pages.creatures[languageCode].path;\r\nconst getSearchPath = (languageCode) =>\r\n  localizedNavigation.pages.search[languageCode].path;\r\n\r\nconst removeSpecialCharacters = (s) => s.replace(/\\s/g, \"\");\r\n\r\nexports.getTagsPath = getTagsPath;\r\nexports.getCreaturesPath = getCreaturesPath;\r\nexports.getSearchPath = getSearchPath;\r\n\r\nexports.localizedSlug = ({ isDefault, locale, slug, isPage }) => {\r\n  if (isPage) {\r\n    return isDefault ? `/${slug}` : `/${locale}/${slug}`;\r\n  }\r\n\r\n  const creaturesPath = getCreaturesPath(locale);\r\n\r\n  return isDefault\r\n    ? `${creaturesPath}/${slug}`\r\n    : `/${locale + creaturesPath}/${slug}`;\r\n};\r\n\r\nexports.getTagUrl = (tag, languageCode) =>\r\n  `${getTagsPath(languageCode)}#${removeSpecialCharacters(tag)}`;\r\n\r\nexports.getTagValueUrl = (tag, value, languageCode, pageIndex) => {\r\n  if (!tag || !value) return null;\r\n  const url = `${getSearchPath(languageCode)}/${removeSpecialCharacters(\r\n    tag,\r\n  ).toLowerCase()}/${removeSpecialCharacters(value).toLowerCase()}`;\r\n  return url + pagePath(pageIndex);\r\n};\r\n\r\nexports.getCreatureUrl = (creatureName, languageCode) => {\r\n  return `${getCreaturesPath(languageCode)}/${removeSpecialCharacters(\r\n    creatureName,\r\n  )}`;\r\n};\r\n\r\nexports.getCreaturesUrl = (pageIndex, languageCode) => {\r\n  return getCreaturesPath(languageCode) + pagePath(pageIndex);\r\n};\r\n\r\nexports.getNameFromPath = (value) => {\r\n  const nameWithLanguage = path.basename(value, \".md\");\r\n  const name = nameWithLanguage.slice(0, -3); //\".en\".length = 3\r\n  const language = nameWithLanguage.slice(-2); //\"en\".length = 2\r\n\r\n  return {\r\n    name,\r\n    language,\r\n  };\r\n};\r\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;"],"names":["props","imagePath","image","imageName","getImageNameOrDefaultCover","useImages","find","img","name","LocalizedLink","className","to","slug","G","alt","title","description","language","React","LocaleContext","pages","map","node","frontmatter","date","fields","key","getCreaturesPath","code","text","useStaticQuery","listImages","edges","edge","childImageSharp","metadata","relativePath","exports","split","pop","localizedNavigation","require","path","pagePath","pageIndex","getTagsPath","languageCode","tags","creatures","getSearchPath","search","removeSpecialCharacters","s","replace","tag","value","toLowerCase","creatureName","nameWithLanguage","basename","slice","assertPath","TypeError","JSON","stringify","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","i","length","charCodeAt","lastSlashIndex","lastIndexOf","posix","resolve","cwd","resolvedPath","resolvedAbsolute","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","from","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","_format","parse","ret","delimiter","win32","module"],"sourceRoot":""}