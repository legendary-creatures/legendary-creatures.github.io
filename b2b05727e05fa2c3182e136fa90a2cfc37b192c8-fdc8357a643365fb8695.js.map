{"version":3,"file":"b2b05727e05fa2c3182e136fa90a2cfc37b192c8-fdc8357a643365fb8695.js","mappings":"gIAUAA,EAAOC,QAVP,SAA2BC,EAAKC,IACnB,MAAPA,GAAeA,EAAMD,EAAIE,UAAQD,EAAMD,EAAIE,QAE/C,IAAK,IAAIC,EAAI,EAAGC,EAAO,IAAIC,MAAMJ,GAAME,EAAIF,EAAKE,IAC9CC,EAAKD,GAAKH,EAAIG,GAGhB,OAAOC,GAG2BN,EAAOC,QAAQO,YAAa,EAAMR,EAAOC,QAAiB,QAAID,EAAOC,S,qBCVzG,IAAIQ,EAAmB,EAAQ,MAM/BT,EAAOC,QAJP,SAA4BC,GAC1B,GAAIK,MAAMG,QAAQR,GAAM,OAAOO,EAAiBP,IAGbF,EAAOC,QAAQO,YAAa,EAAMR,EAAOC,QAAiB,QAAID,EAAOC,S,iBCF1GD,EAAOC,QAJP,SAA0BU,GACxB,GAAsB,oBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOJ,MAAMO,KAAKH,IAGnFX,EAAOC,QAAQO,YAAa,EAAMR,EAAOC,QAAiB,QAAID,EAAOC,S,iBCAxGD,EAAOC,QAJP,WACE,MAAM,IAAIc,UAAU,yIAGef,EAAOC,QAAQO,YAAa,EAAMR,EAAOC,QAAiB,QAAID,EAAOC,S,oBCJ1G,IAAIe,EAAoB,EAAQ,MAE5BC,EAAkB,EAAQ,MAE1BC,EAA6B,EAAQ,KAErCC,EAAoB,EAAQ,MAMhCnB,EAAOC,QAJP,SAA4BC,GAC1B,OAAOc,EAAkBd,IAAQe,EAAgBf,IAAQgB,EAA2BhB,IAAQiB,KAGzDnB,EAAOC,QAAQO,YAAa,EAAMR,EAAOC,QAAiB,QAAID,EAAOC,S,oBCZ1G,IAAIQ,EAAmB,EAAQ,MAW/BT,EAAOC,QATP,SAAqCmB,EAAGC,GACtC,GAAKD,EAAL,CACA,GAAiB,iBAANA,EAAgB,OAAOX,EAAiBW,EAAGC,GACtD,IAAIC,EAAIC,OAAOC,UAAUC,SAASC,KAAKN,GAAGO,MAAM,GAAI,GAEpD,MADU,WAANL,GAAkBF,EAAEQ,cAAaN,EAAIF,EAAEQ,YAAYC,MAC7C,QAANP,GAAqB,QAANA,EAAoBf,MAAMO,KAAKM,GACxC,cAANE,GAAqB,2CAA2CQ,KAAKR,GAAWb,EAAiBW,EAAGC,QAAxG,IAG4CrB,EAAOC,QAAQO,YAAa,EAAMR,EAAOC,QAAiB,QAAID,EAAOC,S,kCCXnHA,EAAQ,EAAgB,SAAC8B,EAAOC,EAAcC,GACvCA,IAAeA,EAAgB,SAACC,GAAD,OAAOA,IAC3C,IAAMC,EAAI,EAAOJ,GAIjB,OAHAI,EAAKC,MAAK,SAACC,EAAGC,GAAJ,OACRL,EAAcI,GAAGE,cAAcN,EAAcK,GAAIN,MAE5CG,I,yBCNHK,EAAsBC,EAAQ,MAC9BC,EAAOD,EAAQ,MAEfE,EAAW,SAACC,GAAD,OAAgBA,GAAa,EAAb,IAAqBA,EAAc,IAE9DC,EAAc,SAACb,GAAD,OAClBQ,EAAoBM,MAAMC,KAAKf,GAAcU,MACzCM,EAAmB,SAAChB,GAAD,OACvBQ,EAAoBM,MAAMG,UAAUjB,GAAcU,MAC9CQ,EAAgB,SAAClB,GAAD,OACpBQ,EAAoBM,MAAMK,OAAOnB,GAAcU,MAE3CU,EAA0B,SAACC,GAAD,OAAOA,EAAEC,QAAQ,MAAO,KAExDrD,EAAQ,GAAc4C,EACtB5C,EAAQ,GAAmB+C,EAe3B/C,EAAQ,GAAY,SAACsD,EAAKvB,GAAN,OACfa,EAAYb,GADG,IACcoB,EAAwBG,IAE1DtD,EAAQ,GAAiB,SAACsD,EAAKC,EAAOxB,EAAcY,GAClD,OAAKW,GAAQC,EACEN,EAAclB,GAApB,IAAqCoB,EAC5CG,GACAE,cAFO,IAEUL,EAAwBI,GAAOC,cACrCd,EAASC,GAJK,MAO7B3C,EAAQ,GAAiB,SAACyD,EAAc1B,GACtC,OAAUgB,EAAiBhB,GAA3B,IAA4CoB,EAC1CM,IAIJzD,EAAQ,GAAkB,SAAC2C,EAAWZ,GACpC,OAAOgB,EAAiBhB,GAAgBW,EAASC,IAGnD3C,EAAQ,GAAkB,SAACuD,GACzB,IAAMG,EAAmBjB,EAAKkB,SAASJ,EAAO,OAI9C,MAAO,CACL3B,KAJW8B,EAAiBhC,MAAM,GAAI,GAKtCkC,SAJeF,EAAiBhC,OAAO,M,8BC9B3C,SAASmC,EAAWpB,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAI3B,UAAU,mCAAqCgD,KAAKC,UAAUtB,IAK5E,SAASuB,EAAqBvB,EAAMwB,GAOlC,IANA,IAIIC,EAJAC,EAAM,GACNC,EAAoB,EACpBC,GAAa,EACbC,EAAO,EAGFlE,EAAI,EAAGA,GAAKqC,EAAKtC,SAAUC,EAAG,CACrC,GAAIA,EAAIqC,EAAKtC,OAAQ+D,EAAOzB,EAAK8B,WAAWnE,OAAQ,IAAa,KAAT8D,EAEtD,MAAWA,EAAO,GAIpB,GAAa,KAATA,EAEF,CACA,GAAIG,IAAcjE,EAAI,GAAc,IAATkE,QACpB,GAAID,IAAcjE,EAAI,GAAc,IAATkE,EAAY,CAC5C,GAAIH,EAAIhE,OAAS,GAA2B,IAAtBiE,GAA8D,KAAnCD,EAAII,WAAWJ,EAAIhE,OAAS,IAEvC,KAAnCgE,EAAII,WAAWJ,EAAIhE,OAAS,GAG7B,GAAIgE,EAAIhE,OAAS,EAAG,CAClB,IAAIqE,EAAiBL,EAAIM,YAAY,KAErC,GAAID,IAAmBL,EAAIhE,OAAS,EAAG,EACb,IAApBqE,GACFL,EAAM,GACNC,EAAoB,GAGpBA,GADAD,EAAMA,EAAIzC,MAAM,EAAG8C,IACKrE,OAAS,EAAIgE,EAAIM,YAAY,KAGvDJ,EAAYjE,EACZkE,EAAO,EACP,eAEG,GAAmB,IAAfH,EAAIhE,QAA+B,IAAfgE,EAAIhE,OAAc,CAC/CgE,EAAM,GACNC,EAAoB,EACpBC,EAAYjE,EACZkE,EAAO,EACP,SAIAL,IACEE,EAAIhE,OAAS,EAAGgE,GAAO,MAAWA,EAAM,KAC5CC,EAAoB,QAGlBD,EAAIhE,OAAS,EAAGgE,GAAO,IAAM1B,EAAKf,MAAM2C,EAAY,EAAGjE,GAAQ+D,EAAM1B,EAAKf,MAAM2C,EAAY,EAAGjE,GACnGgE,EAAoBhE,EAAIiE,EAAY,EAGtCA,EAAYjE,EACZkE,EAAO,OACW,KAATJ,IAEE,IAAVI,IACCA,EAEFA,GAAQ,EAIZ,OAAOH,EAkBT,IAAIO,EAAQ,CAEVC,QAAS,WAKP,IAJA,IAEIC,EAFAC,EAAe,GACfC,GAAmB,EAGd1E,EAAI2E,UAAU5E,OAAS,EAAGC,IAAM,IAAM0E,EAAkB1E,IAAK,CACpE,IAAIqC,EACArC,GAAK,EAAGqC,EAAOsC,UAAU3E,SACf4E,IAARJ,IAAmBA,EAAMK,QAAQL,OACrCnC,EAAOmC,GAETf,EAAWpB,GAES,IAAhBA,EAAKtC,SAIT0E,EAAepC,EAAO,IAAMoC,EAC5BC,EAA0C,KAAvBrC,EAAK8B,WAAW,IAUrC,OAFAM,EAAeb,EAAqBa,GAAeC,GAE/CA,EACED,EAAa1E,OAAS,EAAU,IAAM0E,EAAyB,IAC1DA,EAAa1E,OAAS,EACxB0E,EAEA,KAGXK,UAAW,SAAmBzC,GAE5B,GADAoB,EAAWpB,GACS,IAAhBA,EAAKtC,OAAc,MAAO,IAC9B,IAAIgF,EAAoC,KAAvB1C,EAAK8B,WAAW,GAG7Ba,EAAyD,KAArC3C,EAAK8B,WAAW9B,EAAKtC,OAAS,GAOtD,OAFoB,KADpBsC,EAAOuB,EAAqBvB,GAAO0C,IAC1BhF,QAAiBgF,IAAY1C,EAAO,KACzCA,EAAKtC,OAAS,GAAKiF,IAAmB3C,GAAQ,KAC9C0C,EAAmB,IAAM1C,EACtBA,GAET0C,WAAY,SAAoB1C,GAE9B,OADAoB,EAAWpB,GACJA,EAAKtC,OAAS,GAA4B,KAAvBsC,EAAK8B,WAAW,IAI5Cc,KAAM,WACJ,GAAyB,IAArBN,UAAU5E,OAAc,MAAO,IAGnC,IAFA,IAAImF,EAEKlF,EAAI,EAAGA,EAAI2E,UAAU5E,SAAUC,EAAG,CACzC,IAAImF,EAAMR,UAAU3E,GACpByD,EAAW0B,GAEPA,EAAIpF,OAAS,SACA6E,IAAXM,EAAsBA,EAASC,EAASD,GAAU,IAAMC,GAIhE,YAAeP,IAAXM,EAA6B,IAC1BZ,EAAMQ,UAAUI,IAEzBE,SAAU,SAAkB3E,EAAM4E,GAGhC,GAFA5B,EAAWhD,GACXgD,EAAW4B,GACP5E,IAAS4E,EAAI,MAAO,GAGxB,IAFA5E,EAAO6D,EAAMC,QAAQ9D,OACrB4E,EAAKf,EAAMC,QAAQc,IACF,MAAO,GAIxB,IAFA,IAAIC,EAAY,EAETA,EAAY7E,EAAKV,QACa,KAA/BU,EAAK0D,WAAWmB,KADYA,GAWlC,IALA,IAAIC,EAAU9E,EAAKV,OACfyF,EAAUD,EAAUD,EAEpBG,EAAU,EAEPA,EAAUJ,EAAGtF,QACa,KAA3BsF,EAAGlB,WAAWsB,KADUA,GAa9B,IAPA,IACIC,EADQL,EAAGtF,OACK0F,EAEhB1F,EAASyF,EAAUE,EAAQF,EAAUE,EACrCC,GAAiB,EACjB3F,EAAI,EAEDA,GAAKD,IAAUC,EAAG,CACvB,GAAIA,IAAMD,EAAQ,CAChB,GAAI2F,EAAQ3F,EAAQ,CAClB,GAAmC,KAA/BsF,EAAGlB,WAAWsB,EAAUzF,GAK1B,OAAOqF,EAAG/D,MAAMmE,EAAUzF,EAAI,GACzB,GAAU,IAANA,EAGT,OAAOqF,EAAG/D,MAAMmE,EAAUzF,QAEnBwF,EAAUzF,IACoB,KAAnCU,EAAK0D,WAAWmB,EAAYtF,GAK9B2F,EAAgB3F,EACD,IAANA,IAGT2F,EAAgB,IAIpB,MAGF,IAAIC,EAAWnF,EAAK0D,WAAWmB,EAAYtF,GAE3C,GAAI4F,IADSP,EAAGlB,WAAWsB,EAAUzF,GACZ,MAA4B,KAAb4F,IAEtCD,EAAgB3F,GAGpB,IAAI6F,EAAM,GAGV,IAAK7F,EAAIsF,EAAYK,EAAgB,EAAG3F,GAAKuF,IAAWvF,EAClDA,IAAMuF,GAAkC,KAAvB9E,EAAK0D,WAAWnE,KAGhB,IAAf6F,EAAI9F,OAAc8F,GAAO,KAAUA,GAAO,OAMlD,OAAIA,EAAI9F,OAAS,EAAU8F,EAAMR,EAAG/D,MAAMmE,EAAUE,IAClDF,GAAWE,EACoB,KAA3BN,EAAGlB,WAAWsB,MAEdA,EACGJ,EAAG/D,MAAMmE,KAGpBK,UAAW,SAAmBzD,GAC5B,OAAOA,GAET0D,QAAS,SAAiB1D,GAExB,GADAoB,EAAWpB,GACS,IAAhBA,EAAKtC,OAAc,MAAO,IAQ9B,IAPA,IAAI+D,EAAOzB,EAAK8B,WAAW,GACvB6B,EAAmB,KAATlC,EAGVmC,GAAO,EACPC,GAAe,EAEVlG,EAAIqC,EAAKtC,OAAS,EAAGC,GAAK,IAAKA,EAGtC,GAAa,MAFb8D,EAAOzB,EAAK8B,WAAWnE,KAKrB,IAAKkG,EAAc,CACjBD,EAAMjG,EACN,YAIFkG,GAAe,EAInB,OAAa,IAATD,EAAmBD,EAAU,IAAM,IACnCA,GAAmB,IAARC,EAAkB,KAC1B5D,EAAKf,MAAM,EAAG2E,IAEvB1C,SAAU,SAAkBlB,EAAM8D,GAChC,QAAYvB,IAARuB,GAAoC,iBAARA,EAAkB,MAAM,IAAIzF,UAAU,mCACtE+C,EAAWpB,GACX,IAGIrC,EAHAoG,EAAQ,EACRH,GAAO,EACPC,GAAe,EAGnB,QAAYtB,IAARuB,GAAqBA,EAAIpG,OAAS,GAAKoG,EAAIpG,QAAUsC,EAAKtC,OAAQ,CACpE,GAAIoG,EAAIpG,SAAWsC,EAAKtC,QAAUoG,IAAQ9D,EAAM,MAAO,GACvD,IAAIgE,EAASF,EAAIpG,OAAS,EACtBuG,GAAoB,EAExB,IAAKtG,EAAIqC,EAAKtC,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACrC,IAAI8D,EAAOzB,EAAK8B,WAAWnE,GAE3B,GAAa,KAAT8D,GAKF,IAAKoC,EAAc,CACjBE,EAAQpG,EAAI,EACZ,YAGwB,IAAtBsG,IAGFJ,GAAe,EACfI,EAAmBtG,EAAI,GAGrBqG,GAAU,IAERvC,IAASqC,EAAIhC,WAAWkC,IACR,KAAZA,IAGJJ,EAAMjG,IAKRqG,GAAU,EACVJ,EAAMK,IAOd,OADIF,IAAUH,EAAKA,EAAMK,GAAmC,IAATL,IAAYA,EAAM5D,EAAKtC,QACnEsC,EAAKf,MAAM8E,EAAOH,GAEzB,IAAKjG,EAAIqC,EAAKtC,OAAS,EAAGC,GAAK,IAAKA,EAClC,GAA2B,KAAvBqC,EAAK8B,WAAWnE,IAKlB,IAAKkG,EAAc,CACjBE,EAAQpG,EAAI,EACZ,YAEgB,IAATiG,IAGTC,GAAe,EACfD,EAAMjG,EAAI,GAId,OAAa,IAATiG,EAAmB,GAChB5D,EAAKf,MAAM8E,EAAOH,IAG7BM,QAAS,SAAiBlE,GACxBoB,EAAWpB,GASX,IARA,IAAImE,GAAY,EACZC,EAAY,EACZR,GAAO,EACPC,GAAe,EAGfQ,EAAc,EAET1G,EAAIqC,EAAKtC,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACzC,IAAI8D,EAAOzB,EAAK8B,WAAWnE,GAE3B,GAAa,KAAT8D,GAaS,IAATmC,IAGFC,GAAe,EACfD,EAAMjG,EAAI,GAGC,KAAT8D,GAIgB,IAAd0C,EAAiBA,EAAWxG,EAA2B,IAAhB0G,IAAmBA,EAAc,IACrD,IAAdF,IAGTE,GAAe,QAvBf,IAAKR,EAAc,CACjBO,EAAYzG,EAAI,EAChB,OAyBN,OAAkB,IAAdwG,IAA4B,IAATP,GACP,IAAhBS,GACgB,IAAhBA,GAAqBF,IAAaP,EAAM,GAAKO,IAAaC,EAAY,EAC7D,GAGFpE,EAAKf,MAAMkF,EAAUP,IAE9BU,OAAQ,SAAgBC,GACtB,GAAmB,OAAfA,GAA6C,iBAAfA,EAChC,MAAM,IAAIlG,UAAU,0EAA4EkG,GAGlG,OA/VJ,SAAiBC,EAAKD,GACpB,IAAIE,EAAMF,EAAWE,KAAOF,EAAWG,KACnCC,EAAOJ,EAAWI,OAASJ,EAAWpF,MAAQ,KAAOoF,EAAWT,KAAO,IAE3E,OAAKW,EAIDA,IAAQF,EAAWG,KACdD,EAAME,EAGRF,EAAMD,EAAMG,EAPVA,EA0VAC,CAAQ,IAAKL,IAEtBM,MAAO,SAAe7E,GACpBoB,EAAWpB,GACX,IAAI8E,EAAM,CACRJ,KAAM,GACND,IAAK,GACLE,KAAM,GACNb,IAAK,GACL3E,KAAM,IAER,GAAoB,IAAhBa,EAAKtC,OAAc,OAAOoH,EAC9B,IAIIf,EAJAtC,EAAOzB,EAAK8B,WAAW,GACvBY,EAAsB,KAATjB,EAKbiB,GACFoC,EAAIJ,KAAO,IACXX,EAAQ,GAERA,EAAQ,EAYV,IATA,IAAII,GAAY,EACZC,EAAY,EACZR,GAAO,EACPC,GAAe,EACflG,EAAIqC,EAAKtC,OAAS,EAGlB2G,EAAc,EAEX1G,GAAKoG,IAASpG,EAGnB,GAAa,MAFb8D,EAAOzB,EAAK8B,WAAWnE,KAeV,IAATiG,IAGFC,GAAe,EACfD,EAAMjG,EAAI,GAGC,KAAT8D,GAIgB,IAAd0C,EAAiBA,EAAWxG,EAA2B,IAAhB0G,IAAmBA,EAAc,IACrD,IAAdF,IAGTE,GAAe,QAvBf,IAAKR,EAAc,CACjBO,EAAYzG,EAAI,EAChB,MA4CN,OAnBkB,IAAdwG,IAA4B,IAATP,GACP,IAAhBS,GACgB,IAAhBA,GAAqBF,IAAaP,EAAM,GAAKO,IAAaC,EAAY,GACvD,IAATR,IACiCkB,EAAIH,KAAOG,EAAI3F,KAAhC,IAAdiF,GAAmB1B,EAAkC1C,EAAKf,MAAM,EAAG2E,GAAgC5D,EAAKf,MAAMmF,EAAWR,KAG7G,IAAdQ,GAAmB1B,GACrBoC,EAAI3F,KAAOa,EAAKf,MAAM,EAAGkF,GACzBW,EAAIH,KAAO3E,EAAKf,MAAM,EAAG2E,KAEzBkB,EAAI3F,KAAOa,EAAKf,MAAMmF,EAAWD,GACjCW,EAAIH,KAAO3E,EAAKf,MAAMmF,EAAWR,IAGnCkB,EAAIhB,IAAM9D,EAAKf,MAAMkF,EAAUP,IAG7BQ,EAAY,EAAGU,EAAIL,IAAMzE,EAAKf,MAAM,EAAGmF,EAAY,GAAY1B,IAAYoC,EAAIL,IAAM,KAClFK,GAETN,IAAK,IACLO,UAAW,IACXC,MAAO,KACP/C,MAAO,MAETA,EAAMA,MAAQA,EACd3E,EAAOC,QAAU0E","sources":["webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://catskald-legendary-creatures/./src/utils/array-helpers.js","webpack://catskald-legendary-creatures/./src/utils/url-helpers.js","webpack://catskald-legendary-creatures/./node_modules/path-browserify/index.js"],"sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","exports.localizedSort = (array, languageCode, valueSelector) => {\r\n  if (!valueSelector) valueSelector = (x) => x;\r\n  const temp = [...array];\r\n  temp.sort((a, b) =>\r\n    valueSelector(a).localeCompare(valueSelector(b), languageCode),\r\n  );\r\n  return temp;\r\n};\r\n","const localizedNavigation = require(\"../i18n/navigation\");\r\nconst path = require(\"path\");\r\n\r\nconst pagePath = (pageIndex) => (pageIndex >= 1 ? `/${pageIndex}` : \"\");\r\n\r\nconst getTagsPath = (languageCode) =>\r\n  localizedNavigation.pages.tags[languageCode].path;\r\nconst getCreaturesPath = (languageCode) =>\r\n  localizedNavigation.pages.creatures[languageCode].path;\r\nconst getSearchPath = (languageCode) =>\r\n  localizedNavigation.pages.search[languageCode].path;\r\n\r\nconst removeSpecialCharacters = (s) => s.replace(/\\s/g, \"\");\r\n\r\nexports.getTagsPath = getTagsPath;\r\nexports.getCreaturesPath = getCreaturesPath;\r\nexports.getSearchPath = getSearchPath;\r\n\r\nexports.localizedSlug = ({ isDefault, locale, slug, isPage }) => {\r\n  if (isPage) {\r\n    return isDefault ? `/${slug}` : `/${locale}/${slug}`;\r\n  }\r\n\r\n  const creaturesPath = getCreaturesPath(locale);\r\n\r\n  return isDefault\r\n    ? `${creaturesPath}/${slug}`\r\n    : `/${locale + creaturesPath}/${slug}`;\r\n};\r\n\r\nexports.getTagUrl = (tag, languageCode) =>\r\n  `${getTagsPath(languageCode)}#${removeSpecialCharacters(tag)}`;\r\n\r\nexports.getTagValueUrl = (tag, value, languageCode, pageIndex) => {\r\n  if (!tag || !value) return null;\r\n  const url = `${getSearchPath(languageCode)}/${removeSpecialCharacters(\r\n    tag,\r\n  ).toLowerCase()}/${removeSpecialCharacters(value).toLowerCase()}`;\r\n  return url + pagePath(pageIndex);\r\n};\r\n\r\nexports.getCreatureUrl = (creatureName, languageCode) => {\r\n  return `${getCreaturesPath(languageCode)}/${removeSpecialCharacters(\r\n    creatureName,\r\n  )}`;\r\n};\r\n\r\nexports.getCreaturesUrl = (pageIndex, languageCode) => {\r\n  return getCreaturesPath(languageCode) + pagePath(pageIndex);\r\n};\r\n\r\nexports.getNameFromPath = (value) => {\r\n  const nameWithLanguage = path.basename(value, \".md\");\r\n  const name = nameWithLanguage.slice(0, -3); //\".en\".length = 3\r\n  const language = nameWithLanguage.slice(-2); //\"en\".length = 2\r\n\r\n  return {\r\n    name,\r\n    language,\r\n  };\r\n};\r\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;"],"names":["module","exports","arr","len","length","i","arr2","Array","__esModule","arrayLikeToArray","isArray","iter","Symbol","iterator","from","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","array","languageCode","valueSelector","x","temp","sort","a","b","localeCompare","localizedNavigation","require","path","pagePath","pageIndex","getTagsPath","pages","tags","getCreaturesPath","creatures","getSearchPath","search","removeSpecialCharacters","s","replace","tag","value","toLowerCase","creatureName","nameWithLanguage","basename","language","assertPath","JSON","stringify","normalizeStringPosix","allowAboveRoot","code","res","lastSegmentLength","lastSlash","dots","charCodeAt","lastSlashIndex","lastIndexOf","posix","resolve","cwd","resolvedPath","resolvedAbsolute","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","_format","parse","ret","delimiter","win32"],"sourceRoot":""}