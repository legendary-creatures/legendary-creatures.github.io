{"version":3,"file":"component---src-templates-tags-js-1364cd2da6ff33bbd340.js","mappings":"iLACO,I,UCYP,EARkB,SAACA,GACjB,OAAO,sBAAIC,UDLM,8BCKaD,EAAME,Q,yJCyDtC,EA/CgB,SAACF,GACf,IAAMG,GAAeC,EAAAA,EAAAA,KACbC,EAAaC,EAAAA,WAAiBC,EAAAA,GAA9BF,SAYR,OACE,2BAASJ,UC9BQ,gCDmBG,SAACO,GAAD,OACpBC,EAAAA,EAAAA,GACEC,OAAOC,QAAQH,GAAMI,KAAI,gBAAEC,EAAF,KAAOC,EAAP,WAAoB,CAC3CD,IAAKV,EAAaU,GAClBC,QAAQL,EAAAA,EAAAA,GAAcK,EAAQT,EAASU,UAEzCV,EAASU,MACT,SAACC,GAAD,OAAOA,EAAEH,OAKRI,CAAcjB,EAAMQ,MAAMI,KAAI,YAAsB,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OACrC,OACE,uBAAKI,IAAKL,EAAKZ,UChCE,sCDiCf,gBAACkB,EAAA,EAAD,CACElB,UCjCY,oCDkCZmB,IAAIC,EAAAA,EAAAA,IAAUR,EAAKR,EAASU,OAE3BF,GAEH,2BACCC,EAAOF,KAAI,SAACU,EAAOC,GAAR,OACV,gBAACJ,EAAA,EAAD,CACElB,UCxCY,sCDyCZiB,IAAQL,EAAL,IAAYS,EAAQC,EACvBH,IAAII,EAAAA,EAAAA,IAAeX,EAAKS,EAAOjB,EAASU,OAEvCO,MAGL,iC,oBEdZ,EA3Ba,SAACtB,GACZ,IAAMG,GAAeC,EAAAA,EAAAA,KACfI,GAAOiB,EAAAA,EAAAA,GAAUzB,EAAM0B,KAAKC,kBAAkBC,OAEpD,OACE,gCACE,gBAAC,IAAD,CAAKC,MAAO1B,EAAa2B,gBACzB,gBAACC,EAAA,EAAD,CAAW7B,KAAMC,EAAa2B,gBAC9B,gBAAC,EAAD,CAAStB,KAAMA,O,kCClBfwB,EAAsBC,EAAQ,MAC5BC,EAAUD,EAAQ,MAAlBC,MAERC,EAAQ,EAAY,SAACP,GACnB,IAAIpB,EAAO,GAwBX,OAtBAoB,EAAMQ,SAAQ,YAAgC,IAArBC,EAAoB,EAA5BC,KAAQD,YACvB,IAAK,IAAMxB,KAAOwB,EAChB,GAAKL,EAAoBxB,KAAKK,GAA9B,CAEA,IAAI0B,EAAYF,EAAYxB,GAC5B,GAAK0B,GAMoB,KADzBA,GAHAA,EAAYC,MAAMC,QAAQF,GACtBA,EAAU3B,KAAI,SAAC8B,GAAD,OAAOA,EAAEpB,SACvB,CAACiB,EAAUjB,QACOqB,QAAO,SAACrB,GAAD,OAAWA,IAAUY,MACpCU,OAAd,CAEA,IAAMC,EAAerC,EAAKK,GAExBL,EAAKK,GADHgC,EACF,EAAgB,IAAIC,IAAID,EAAaE,OAAOR,KAEhCA,OAKX/B","sources":["webpack://catskald-legendary-creatures/./src/components/TitlePage/index.module.scss","webpack://catskald-legendary-creatures/./src/components/TitlePage/index.js","webpack://catskald-legendary-creatures/./src/components/TagList/index.js","webpack://catskald-legendary-creatures/./src/components/TagList/index.module.scss","webpack://catskald-legendary-creatures/./src/templates/tags.js","webpack://catskald-legendary-creatures/./src/utils/tags-helpers.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var title = \"index-module--title--2qFtM\";","import { title } from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TitlePage = (props) => {\r\n  return <h1 className={title}>{props.text}</h1>;\r\n};\r\n\r\nTitlePage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TitlePage;\r\n","import {\r\n  tagList,\r\n  tagList__item,\r\n  tagList__tag,\r\n  tagList__value,\r\n} from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport { LocaleContext } from \"../Layout\";\r\nimport useTranslations from \"../../i18n/translations/useTranslations\";\r\nimport { getTagUrl, getTagValueUrl } from \"../../utils/url-helpers\";\r\nimport { localizedSort } from \"../../utils/array-helpers\";\r\n\r\nconst TagList = (props) => {\r\n  const translations = useTranslations();\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  const getSortedTags = (tags) =>\r\n    localizedSort(\r\n      Object.entries(tags).map(([tag, values]) => ({\r\n        tag: translations[tag],\r\n        values: localizedSort(values, language.code),\r\n      })),\r\n      language.code,\r\n      (x) => x.tag,\r\n    );\r\n\r\n  return (\r\n    <section className={tagList}>\r\n      {getSortedTags(props.tags).map(({ tag, values }) => {\r\n        return (\r\n          <div key={tag} className={tagList__item}>\r\n            <LocalizedLink\r\n              className={tagList__tag}\r\n              to={getTagUrl(tag, language.code)}\r\n            >\r\n              {tag}\r\n            </LocalizedLink>\r\n            <br />\r\n            {values.map((value, index) => (\r\n              <LocalizedLink\r\n                className={tagList__value}\r\n                key={`${tag}_${value}${index}`}\r\n                to={getTagValueUrl(tag, value, language.code)}\r\n              >\r\n                {value}\r\n              </LocalizedLink>\r\n            ))}\r\n            <br />\r\n          </div>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TagList;\r\n","// extracted by mini-css-extract-plugin\nexport var tagList = \"index-module--tagList--3x1P2\";\nexport var tagList__item = \"index-module--tagList__item--2Mb-n\";\nexport var tagList__tag = \"index-module--tagList__tag--3DU9P\";\nexport var tagList__value = \"index-module--tagList__value--39gWZ\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport TitlePage from \"../components/TitlePage\";\r\nimport TagList from \"../components/TagList\";\r\nimport SEO from \"../components/seo\";\r\nimport useTranslations from \"../i18n/translations/useTranslations\";\r\nimport { parseTags } from \"../utils/tags-helpers\";\r\n\r\nconst Tags = (props) => {\r\n  const translations = useTranslations();\r\n  const tags = parseTags(props.data.allMarkdownRemark.edges);\r\n\r\n  return (\r\n    <>\r\n      <SEO title={translations.TagsPageTitle} />\r\n      <TitlePage text={translations.TagsPageTitle} />\r\n      <TagList tags={tags} />\r\n    </>\r\n  );\r\n};\r\n\r\nTags.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.object.isRequired,\r\n          }),\r\n        }).isRequired,\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const query = graphql`\r\n  query Tags($locale: String!) {\r\n    allMarkdownRemark(\r\n      filter: {\r\n        fields: { locale: { eq: $locale } }\r\n        frontmatter: { page: { eq: null } }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            origin {\r\n              value\r\n            }\r\n            taxonomy {\r\n              value\r\n            }\r\n            shapeshifting {\r\n              value\r\n            }\r\n            activityTime {\r\n              value\r\n            }\r\n            voice {\r\n              value\r\n            }\r\n            appearance {\r\n              value\r\n            }\r\n            character {\r\n              value\r\n            }\r\n            clothes {\r\n              value\r\n            }\r\n            paraphernalia {\r\n              value\r\n            }\r\n            number {\r\n              value\r\n            }\r\n            habitat {\r\n              value\r\n            }\r\n            wikipedia\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const localizedNavigation = require(\"../i18n/navigation\");\r\nconst { noTag } = require(\"../configuration\");\r\n\r\nexports.parseTags = (edges) => {\r\n  let tags = {};\r\n\r\n  edges.forEach(({ node: { frontmatter } }) => {\r\n    for (const tag in frontmatter) {\r\n      if (!localizedNavigation.tags[tag]) continue;\r\n\r\n      let tagValues = frontmatter[tag];\r\n      if (!tagValues) continue;\r\n\r\n      tagValues = Array.isArray(tagValues)\r\n        ? tagValues.map((v) => v.value)\r\n        : [tagValues.value];\r\n      tagValues = tagValues.filter((value) => value !== noTag);\r\n      if (tagValues.length === 0) continue;\r\n\r\n      const existingTags = tags[tag];\r\n      if (existingTags) {\r\n        tags[tag] = [...new Set(existingTags.concat(tagValues))];\r\n      } else {\r\n        tags[tag] = tagValues;\r\n      }\r\n    }\r\n  });\r\n\r\n  return tags;\r\n};\r\n"],"names":["props","className","text","translations","useTranslations","language","React","LocaleContext","tags","localizedSort","Object","entries","map","tag","values","code","x","getSortedTags","key","LocalizedLink","to","getTagUrl","value","index","getTagValueUrl","parseTags","data","allMarkdownRemark","edges","title","TagsPageTitle","TitlePage","localizedNavigation","require","noTag","exports","forEach","frontmatter","node","tagValues","Array","isArray","v","filter","length","existingTags","Set","concat"],"sourceRoot":""}