{"version":3,"file":"component---src-templates-creature-js-da8479163df255ed4580.js","mappings":"+LAEaA,EAAY,WAuBvB,OAtBuBC,EAAAA,EAAAA,gBAAe,cAA9BC,WAsBUC,MAAMC,KAAI,SAACC,GAAD,MAAW,CACrCC,KAAMD,EAAKE,KAAKC,gBAAgBC,SAASC,aACzCC,MAAON,EAAKE,KAAKC,gBAAgBG,Y,wLCiNrCC,aAAaC,UAAY,CACvBC,YAAaC,IAAAA,OAAAA,YAiCf,mB,SCtOA,EAhCiB,SAACC,GAChB,IAAMC,EAAUD,EAAME,KAAKC,eAE3B,OACE,gCACE,gBAAC,IAAD,CACEC,MAAOH,EAAQH,YAAYM,MAC3BC,YAAaJ,EAAQH,YAAYO,YACjCV,MAAOM,EAAQH,YAAYH,QAE7B,2BAASW,UAAU,YACjB,gBAAC,EAAD,CAAcR,YAAaG,EAAQH,cACnC,uBAAKS,wBAAyB,CAAEC,OAAQP,EAAQQ,Y,mBCpBxDC,EAAQ,EAA6B,SAACC,GAAD,OACnCA,EAAYA,EAAUC,MAAM,MAAMC,MAAMD,MAAM,KAAKC,MAAQ","sources":["webpack://catskald-legendary-creatures/./src/hooks/use-images.js","webpack://catskald-legendary-creatures/./src/components/CreatureCard/index.js","webpack://catskald-legendary-creatures/./src/templates/creature.js","webpack://catskald-legendary-creatures/./src/utils/image-helpers.js"],"sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nexport const useImages = () => {\r\n  const { listImages } = useStaticQuery(\r\n    graphql`\r\n      {\r\n        listImages: allFile(\r\n          filter: { sourceInstanceName: { eq: \"image-assets\" } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              childImageSharp {\r\n                image: gatsbyImageData(layout: CONSTRAINED)\r\n                metadata: parent {\r\n                  ... on File {\r\n                    relativePath\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  );\r\n  return listImages.edges.map((edge) => ({\r\n    name: edge.node.childImageSharp.metadata.relativePath,\r\n    image: edge.node.childImageSharp.image,\r\n  }));\r\n};\r\n","import {\r\n  card__container,\r\n  card,\r\n  card__image,\r\n  card__title,\r\n  card__content,\r\n  card__header,\r\n  card__row,\r\n  card__row__item,\r\n  card__buttons,\r\n  card__hint,\r\n  card__image__container,\r\n  card__image__copyright,\r\n  card__image__copyright__info,\r\n} from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\nimport { Wikipedia } from \"@styled-icons/boxicons-logos/Wikipedia\";\r\nimport { InfoCircleFill } from \"@styled-icons/bootstrap/InfoCircleFill\";\r\nimport { Imdb } from \"@styled-icons/simple-icons/Imdb\";\r\nimport { Youtube2 } from \"@styled-icons/icomoon/Youtube2\";\r\n\r\nimport useTranslations from \"../../i18n/translations/useTranslations\";\r\nimport { useImages } from \"../../hooks/use-images\";\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport { LocaleContext } from \"../Layout\";\r\nimport { noTag } from \"../../configuration\";\r\nimport { supportedTags } from \"../../i18n/navigation\";\r\nimport { localizedSort } from \"../../utils/array-helpers\";\r\nimport { getImageNameOrDefaultCover } from \"../../utils/image-helpers\";\r\nimport { getCreatureUrl, getNameFromPath } from \"../../utils/url-helpers\";\r\nimport { getTagUrl, getTagValueUrl } from \"../../utils/url-helpers\";\r\n\r\nconst CreatureCard2 = (props) => {\r\n  const translations = useTranslations();\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  const imageName = getImageNameOrDefaultCover(props.frontmatter.image);\r\n  const images = useImages();\r\n  const image = images.find((img) => img.name === imageName);\r\n\r\n  //TODO move this inside image?\r\n  const imageCopyrights = props.frontmatter.external_references\r\n    ? props.frontmatter.external_references\r\n        .filter((x) => x.type === \"Image attribution\")\r\n        .map((x) => x.reference_html)\r\n    : [];\r\n\r\n  return (\r\n    <div className={card__container}>\r\n      <div className={card}>\r\n        <div className={card__image__container}>\r\n          <GatsbyImage\r\n            className={card__image}\r\n            image={image.image}\r\n            alt={props.frontmatter.title}\r\n          />\r\n          {imageCopyrights && (\r\n            <>\r\n              <InfoCircleFill className={card__image__copyright__info} />\r\n              <div\r\n                className={card__image__copyright}\r\n                dangerouslySetInnerHTML={{ __html: imageCopyrights[0] }}\r\n              ></div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <table className={card__content}>\r\n          <caption className={card__title}>\r\n            <span>{props.frontmatter.title}</span>\r\n          </caption>\r\n          <tbody>\r\n            {localizedSort(\r\n              supportedTags.map((tag) => ({\r\n                tag: translations[tag],\r\n                values: props.frontmatter[tag],\r\n              })),\r\n              language.code,\r\n              (x) => x.tag,\r\n            ).map(({ tag, values }) => (\r\n              <CardRow\r\n                tag={tag}\r\n                data={values}\r\n                language={language}\r\n                sometimesText={translations[\"sometimes\"]}\r\n                key={tag}\r\n              />\r\n            ))}\r\n            <RelatedCreatures\r\n              data={props.frontmatter}\r\n              label={translations.related}\r\n              language={language}\r\n            />\r\n          </tbody>\r\n        </table>\r\n        <CardButtons data={props.frontmatter} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CardRow = (props) => {\r\n  if (!props.data) return null;\r\n\r\n  let data = Array.isArray(props.data) ? props.data : [props.data];\r\n  data = data.filter((x) => x && x.value !== noTag);\r\n  if (data.length === 0) return null;\r\n\r\n  data = localizedSort(data, props.language.code, (x) => x.value);\r\n  const tagUrl = getTagUrl(props.tag, props.language.code);\r\n\r\n  return (\r\n    <tr>\r\n      <th className={card__header}>\r\n        <LocalizedLink to={tagUrl}>{props.tag}</LocalizedLink>\r\n      </th>\r\n      <td className={card__row}>\r\n        {data.map((category, index) => {\r\n          const tagValueUrl = getTagValueUrl(\r\n            props.tag,\r\n            category.value,\r\n            props.language.code,\r\n          );\r\n\r\n          let comment = \"\";\r\n          if (category.comment && category.sometimes)\r\n            comment = `${props.sometimesText}, ${category.comment}`;\r\n          else if (category.comment) comment = category.comment;\r\n          else if (category.sometimes) comment = props.sometimesText;\r\n\r\n          return (\r\n            <span key={props.tag + index} className={card__row__item}>\r\n              <LocalizedLink to={tagValueUrl}>{category.value}</LocalizedLink>\r\n              <span className={card__hint}>\r\n                {comment ? ` (${comment})` : \"\"}\r\n              </span>\r\n            </span>\r\n          );\r\n        })}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst RelatedCreatures = (props) => {\r\n  if (!props.data.related || props.data.related.length === 0) return <></>;\r\n\r\n  let creatureLinks = props.data.related.map((path) => {\r\n    var name = getNameFromPath(path).name;\r\n    return {\r\n      name: name, //TODO capitalization\r\n      link: getCreatureUrl(name, props.language.code),\r\n    };\r\n  });\r\n  creatureLinks = localizedSort(\r\n    creatureLinks,\r\n    props.language.code,\r\n    (x) => x.name,\r\n  );\r\n\r\n  return (\r\n    <tr>\r\n      <th className={card__header}>{props.label}</th>\r\n      <td className={card__row}>\r\n        {creatureLinks.map(({ name, link }) => (\r\n          <span className={card__row__item} key={name}>\r\n            <LocalizedLink to={link}>{name}</LocalizedLink>\r\n          </span>\r\n        ))}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst CardButtons = (props) => {\r\n  const findButton = (type) => {\r\n    const result =\r\n      props.data.external_references &&\r\n      props.data.external_references.find(\r\n        (x) => x.type === type && x.reference_url,\r\n      );\r\n\r\n    if (result)\r\n      return {\r\n        type: type,\r\n        href: result.reference_url,\r\n        title: result.description ? `${type}: ${result.description}` : type,\r\n      };\r\n    else return null;\r\n  };\r\n\r\n  //TODO add other types\r\n  const wikipedia = findButton(\"Wikipedia\");\r\n  const imdb = findButton(\"IMDB\");\r\n  const youtube = findButton(\"YouTube\");\r\n\r\n  if (!wikipedia && !imdb) return <></>;\r\n\r\n  return (\r\n    <div className={card__buttons}>\r\n      {wikipedia && (\r\n        <a\r\n          href={wikipedia.href}\r\n          title={wikipedia.title}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Wikipedia />\r\n        </a>\r\n      )}\r\n      {imdb && (\r\n        <a\r\n          href={imdb.href}\r\n          title={imdb.title}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Imdb />\r\n        </a>\r\n      )}\r\n      {youtube && (\r\n        <a\r\n          href={youtube.href}\r\n          title={youtube.title}\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Youtube2 />\r\n        </a>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCreatureCard.propTypes = {\r\n  frontmatter: PropTypes.object.isRequired,\r\n};\r\n\r\nconst languageShape = {\r\n  code: PropTypes.string.isRequired,\r\n};\r\nconst categoryShape = {\r\n  value: PropTypes.string.isRequired,\r\n  comment: PropTypes.string,\r\n  sometimes: PropTypes.bool,\r\n};\r\nCardRow.propTypes = {\r\n  tag: PropTypes.string.isRequired,\r\n  data: PropTypes.oneOfType([\r\n    PropTypes.shape(categoryShape),\r\n    PropTypes.arrayOf(PropTypes.shape(categoryShape)),\r\n  ]),\r\n  language: PropTypes.shape(languageShape).isRequired,\r\n  sometimesText: PropTypes.string.isRequired,\r\n};\r\n\r\nCardButtons.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\n\r\nRelatedCreatures.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  language: PropTypes.shape(languageShape).isRequired,\r\n  data: PropTypes.shape({\r\n    related: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  }).isRequired,\r\n};\r\n\r\nexport default CreatureCard;\r\n","import \"../styles/markdown.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { graphql } from \"gatsby\";\r\nimport CreatureCard from \"../components/CreatureCard\";\r\nimport SEO from \"../components/seo\";\r\n\r\nconst Creature = (props) => {\r\n  const content = props.data.markdownRemark;\r\n\r\n  return (\r\n    <>\r\n      <SEO\r\n        title={content.frontmatter.title}\r\n        description={content.frontmatter.description}\r\n        image={content.frontmatter.image}\r\n      />\r\n      <section className=\"markdown\">\r\n        <CreatureCard frontmatter={content.frontmatter} />\r\n        <div dangerouslySetInnerHTML={{ __html: content.html }}></div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nCreature.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.object.isRequired,\r\n          }),\r\n        }).isRequired,\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Creature;\r\n\r\nexport const query = graphql`\r\n  query Creature($locale: String!, $id: String!) {\r\n    markdownRemark(\r\n      frontmatter: { id: { eq: $id } }\r\n      fields: { locale: { eq: $locale } }\r\n    ) {\r\n      frontmatter {\r\n        title\r\n        names {\r\n          name\r\n          plural\r\n          language\r\n        }\r\n        description\r\n        related\r\n        origin {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        taxonomy {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        shapeshifting {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        activityTime {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        voice {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        character {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        appearance {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        clothes {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        paraphernalia {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        number {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        habitat {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        image\r\n        external_references {\r\n          type\r\n          description\r\n          reference_url\r\n          reference_html\r\n        }\r\n      }\r\n      html\r\n    }\r\n  }\r\n`;\r\n","exports.getImageNameOrDefaultCover = (imagePath) =>\r\n  imagePath ? imagePath.split(\"\\\\\").pop().split(\"/\").pop() : \"cover.jpg\";\r\n"],"names":["useImages","useStaticQuery","listImages","edges","map","edge","name","node","childImageSharp","metadata","relativePath","image","CreatureCard","propTypes","frontmatter","PropTypes","props","content","data","markdownRemark","title","description","className","dangerouslySetInnerHTML","__html","html","exports","imagePath","split","pop"],"sourceRoot":""}