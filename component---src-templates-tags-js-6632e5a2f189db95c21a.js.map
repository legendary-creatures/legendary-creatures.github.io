{"version":3,"file":"component---src-templates-tags-js-6632e5a2f189db95c21a.js","mappings":"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","sources":["webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://catskald-legendary-creatures/./node_modules/path-browserify/index.js","webpack://catskald-legendary-creatures/./src/components/TitlePage/index.js","webpack://catskald-legendary-creatures/./src/components/TagList/index.js","webpack://catskald-legendary-creatures/./src/components/TagList/index.module.scss","webpack://catskald-legendary-creatures/./src/templates/tags.js","webpack://catskald-legendary-creatures/./src/utils/array-helpers.js","webpack://catskald-legendary-creatures/./src/utils/tags-helpers.js","webpack://catskald-legendary-creatures/./src/utils/url-helpers.js"],"sourcesContent":["var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TitlePage = (props) => {\r\n  return <h1>{props.text}</h1>;\r\n};\r\n\r\nTitlePage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TitlePage;\r\n","import {\r\n  tagList,\r\n  tagList__item,\r\n  tagList__tag,\r\n  tagList__value,\r\n  tagList__values,\r\n} from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport { LocaleContext } from \"../Layout\";\r\nimport useTranslations from \"../../i18n/translations/useTranslations\";\r\nimport { getTagUrl, getTagValueUrl } from \"../../utils/url-helpers\";\r\nimport { localizedSort } from \"../../utils/array-helpers\";\r\n\r\nconst TagList = (props) => {\r\n  const translations = useTranslations();\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  const getSortedTags = (tags) =>\r\n    localizedSort(\r\n      Object.entries(tags).map(([tag, values]) => ({\r\n        tag: translations[tag],\r\n        values: localizedSort(values, language.code),\r\n      })),\r\n      language.code,\r\n      (x) => x.tag,\r\n    );\r\n\r\n  return (\r\n    <section className={tagList}>\r\n      {getSortedTags(props.tags).map(({ tag, values }) => {\r\n        return (\r\n          <div key={tag} id={tag} className={tagList__item}>\r\n            <LocalizedLink\r\n              className={tagList__tag}\r\n              to={getTagUrl(tag, language.code)}\r\n            >\r\n              {tag}\r\n            </LocalizedLink>\r\n            <br />\r\n            <div className={tagList__values}>\r\n              {values.map((value, index) => (\r\n                <LocalizedLink\r\n                  className={tagList__value}\r\n                  key={`${tag}_${value}${index}`}\r\n                  to={getTagValueUrl(tag, value, language.code)}\r\n                >\r\n                  {value}\r\n                </LocalizedLink>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nTagList.propTypes = {\r\n  tags: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TagList;\r\n","// extracted by mini-css-extract-plugin\nexport var tagList = \"index-module--tagList--RxDEE\";\nexport var tagList__item = \"index-module--tagList__item--vzrM1\";\nexport var tagList__tag = \"index-module--tagList__tag--WJdVm\";\nexport var tagList__value = \"index-module--tagList__value--B5o-T\";\nexport var tagList__values = \"index-module--tagList__values--vpyEZ\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport TitlePage from \"../components/TitlePage\";\r\nimport TagList from \"../components/TagList\";\r\nimport SEO from \"../components/seo\";\r\nimport useTranslations from \"../i18n/translations/useTranslations\";\r\nimport { parseTags } from \"../utils/tags-helpers\";\r\n\r\nconst Tags = (props) => {\r\n  const translations = useTranslations();\r\n  const tags = parseTags(props.data.allMarkdownRemark.edges);\r\n\r\n  return (\r\n    <>\r\n      <SEO title={translations.TagsPageTitle} />\r\n      <TitlePage text={translations.TagsPageTitle} />\r\n      <TagList tags={tags} />\r\n    </>\r\n  );\r\n};\r\n\r\nTags.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.object.isRequired,\r\n          }),\r\n        }).isRequired,\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const query = graphql`\r\n  query Tags($locale: String!) {\r\n    allMarkdownRemark(\r\n      filter: {\r\n        fields: { locale: { eq: $locale } }\r\n        frontmatter: { page: { eq: null } }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            origin {\r\n              value\r\n            }\r\n            taxonomy {\r\n              value\r\n            }\r\n            shapeshifting {\r\n              value\r\n            }\r\n            activityTime {\r\n              value\r\n            }\r\n            voice {\r\n              value\r\n            }\r\n            appearance {\r\n              value\r\n            }\r\n            character {\r\n              value\r\n            }\r\n            clothes {\r\n              value\r\n            }\r\n            paraphernalia {\r\n              value\r\n            }\r\n            number {\r\n              value\r\n            }\r\n            habitat {\r\n              value\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","exports.localizedSort = (array, languageCode, valueSelector) => {\r\n  if (!valueSelector) valueSelector = (x) => x;\r\n  const temp = [...array];\r\n  temp.sort((a, b) =>\r\n    valueSelector(a).localeCompare(valueSelector(b), languageCode),\r\n  );\r\n  return temp;\r\n};\r\n","const localizedNavigation = require(\"../i18n/navigation\");\r\nconst { noTag } = require(\"../configuration\");\r\n\r\nexports.parseTags = (edges) => {\r\n  let tags = {};\r\n\r\n  edges.forEach(({ node: { frontmatter } }) => {\r\n    for (const tag in frontmatter) {\r\n      if (!localizedNavigation.tags[tag]) continue;\r\n\r\n      let tagValues = frontmatter[tag];\r\n      if (!tagValues) continue;\r\n\r\n      tagValues = Array.isArray(tagValues)\r\n        ? tagValues.map((v) => v.value)\r\n        : [tagValues.value];\r\n      tagValues = tagValues.filter((value) => value !== noTag);\r\n      if (tagValues.length === 0) continue;\r\n\r\n      const existingTags = tags[tag];\r\n      if (existingTags) {\r\n        tags[tag] = [...new Set(existingTags.concat(tagValues))];\r\n      } else {\r\n        tags[tag] = tagValues;\r\n      }\r\n    }\r\n  });\r\n\r\n  return tags;\r\n};\r\n","const localizedNavigation = require(\"../i18n/navigation\");\r\nconst path = require(\"path\");\r\n\r\nconst pagePath = (pageIndex) => (pageIndex >= 1 ? `/${pageIndex}` : \"\");\r\n\r\nconst getTagsPath = (languageCode) =>\r\n  localizedNavigation.pages.tags[languageCode].path;\r\nconst getCreaturesPath = (languageCode) =>\r\n  localizedNavigation.pages.creatures[languageCode].path;\r\nconst getSearchPath = (languageCode) =>\r\n  localizedNavigation.pages.search[languageCode].path;\r\n\r\nconst removeSpecialCharacters = (s) => s.replace(/\\s/g, \"\");\r\n\r\nexports.getTagsPath = getTagsPath;\r\nexports.getCreaturesPath = getCreaturesPath;\r\nexports.getSearchPath = getSearchPath;\r\n\r\nexports.localizedSlug = ({ isDefault, locale, slug, isPage }) => {\r\n  if (isPage) {\r\n    return isDefault ? `/${slug}` : `/${locale}/${slug}`;\r\n  }\r\n\r\n  const creaturesPath = getCreaturesPath(locale);\r\n\r\n  return isDefault\r\n    ? `${creaturesPath}/${slug}`\r\n    : `/${locale + creaturesPath}/${slug}`;\r\n};\r\n\r\nexports.getTagUrl = (tag, languageCode) =>\r\n  `${getTagsPath(languageCode)}#${removeSpecialCharacters(tag)}`;\r\n\r\nexports.getTagValueUrl = (tag, value, languageCode, pageIndex) => {\r\n  if (!tag || !value) return null;\r\n  const url = `${getSearchPath(languageCode)}/${removeSpecialCharacters(\r\n    tag,\r\n  ).toLowerCase()}/${removeSpecialCharacters(value).toLowerCase()}`;\r\n  return url + pagePath(pageIndex);\r\n};\r\n\r\nexports.getCreatureUrl = (creatureName, languageCode) => {\r\n  return `${getCreaturesPath(languageCode)}/${removeSpecialCharacters(\r\n    creatureName,\r\n  )}`;\r\n};\r\n\r\nexports.getCreaturesUrl = (pageIndex, languageCode) => {\r\n  return getCreaturesPath(languageCode) + pagePath(pageIndex);\r\n};\r\n\r\nexports.getNameFromPath = (value) => {\r\n  const nameWithLanguage = path.basename(value, \".md\");\r\n  const name = nameWithLanguage.slice(0, -3); //\".en\".length = 3\r\n  const language = nameWithLanguage.slice(-2); //\"en\".length = 2\r\n\r\n  return {\r\n    name,\r\n    language,\r\n  };\r\n};\r\n"],"names":["arrayLikeToArray","module","exports","arr","Array","isArray","__esModule","iter","Symbol","iterator","from","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","assertPath","path","JSON","stringify","normalizeStringPosix","allowAboveRoot","code","res","lastSegmentLength","lastSlash","dots","i","length","charCodeAt","lastSlashIndex","lastIndexOf","slice","posix","resolve","cwd","resolvedPath","resolvedAbsolute","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","name","_format","parse","ret","delimiter","win32","props","text","translations","useTranslations","language","React","LocaleContext","className","tags","localizedSort","Object","entries","map","tag","values","x","getSortedTags","key","id","LocalizedLink","getTagUrl","value","index","getTagValueUrl","parseTags","data","allMarkdownRemark","edges","title","TagsPageTitle","TitlePage","array","languageCode","valueSelector","temp","sort","a","b","localeCompare","localizedNavigation","require","noTag","forEach","frontmatter","node","tagValues","v","filter","existingTags","Set","concat","pagePath","pageIndex","getTagsPath","pages","getCreaturesPath","creatures","getSearchPath","search","removeSpecialCharacters","s","replace","toLowerCase","creatureName","nameWithLanguage"],"sourceRoot":""}