{"version":3,"file":"b2b05727e05fa2c3182e136fa90a2cfc37b192c8-d2b09714bf5f2d445da9.js","mappings":"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","sources":["webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://catskald-legendary-creatures/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://catskald-legendary-creatures/./node_modules/path-browserify/index.js","webpack://catskald-legendary-creatures/./src/utils/array-helpers.js","webpack://catskald-legendary-creatures/./src/utils/url-helpers.js"],"sourcesContent":["function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n} // Resolves . and .. elements in a path with directory names\n\n\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length) code = path.charCodeAt(i);else if (code === 47\n    /*/*/\n    ) break;else code = 47\n    /*/*/\n    ;\n\n    if (code === 47\n    /*/*/\n    ) {\n      if (lastSlash === i - 1 || dots === 1) {// NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46\n        /*.*/\n        || res.charCodeAt(res.length - 2) !== 46\n        /*.*/\n        ) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n\n        if (allowAboveRoot) {\n          if (res.length > 0) res += '/..';else res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46\n    /*.*/\n    && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n\n  if (!dir) {\n    return base;\n  }\n\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0) path = arguments[i];else {\n        if (cwd === undefined) cwd = process.cwd();\n        path = cwd;\n      }\n      assertPath(path); // Skip empty entries\n\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47\n      /*/*/\n      ;\n    } // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n    // Normalize the path\n\n\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0) return '/' + resolvedPath;else return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n  normalize: function normalize(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var isAbsolute = path.charCodeAt(0) === 47\n    /*/*/\n    ;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47\n    /*/*/\n    ; // Normalize the path\n\n    path = normalizeStringPosix(path, !isAbsolute);\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47\n    /*/*/\n    ;\n  },\n  join: function join() {\n    if (arguments.length === 0) return '.';\n    var joined;\n\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n\n      if (arg.length > 0) {\n        if (joined === undefined) joined = arg;else joined += '/' + arg;\n      }\n    }\n\n    if (joined === undefined) return '.';\n    return posix.normalize(joined);\n  },\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n    if (from === to) return '';\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n    if (from === to) return ''; // Trim any leading backslashes\n\n    var fromStart = 1;\n\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart; // Trim any leading backslashes\n\n    var toStart = 1;\n\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47\n      /*/*/\n      ) break;\n    }\n\n    var toEnd = to.length;\n    var toLen = toEnd - toStart; // Compare paths to find the longest common path from root\n\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47\n          /*/*/\n          ) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n\n        break;\n      }\n\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode) break;else if (fromCode === 47\n      /*/*/\n      ) lastCommonSep = i;\n    }\n\n    var out = ''; // Generate the relative path based on the path difference between `to`\n    // and `from`\n\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47\n      /*/*/\n      ) {\n        if (out.length === 0) out += '..';else out += '/..';\n      }\n    } // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n\n\n    if (out.length > 0) return out + to.slice(toStart + lastCommonSep);else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47\n      /*/*/\n      ) ++toStart;\n      return to.slice(toStart);\n    }\n  },\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47\n    /*/*/\n    ;\n    var end = -1;\n    var matchedSlash = true;\n\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n\n        if (code === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47\n        /*/*/\n        ) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0;\n\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n\n    return path.slice(startDot, end);\n  },\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n\n    return _format('/', pathObject);\n  },\n  parse: function parse(path) {\n    assertPath(path);\n    var ret = {\n      root: '',\n      dir: '',\n      base: '',\n      ext: '',\n      name: ''\n    };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47\n    /*/*/\n    ;\n    var start;\n\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1; // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n\n    var preDotState = 0; // Get non-dir info\n\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n\n      if (code === 47\n      /*/*/\n      ) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n\n        continue;\n      }\n\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n\n      if (code === 46\n      /*.*/\n      ) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot\n    preDotState === 0 || // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n    return ret;\n  },\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\nposix.posix = posix;\nmodule.exports = posix;","exports.localizedSort = (array, languageCode, valueSelector) => {\r\n  if (!valueSelector) valueSelector = (x) => x;\r\n  const temp = [...array];\r\n  temp.sort((a, b) =>\r\n    valueSelector(a).localeCompare(valueSelector(b), languageCode),\r\n  );\r\n  return temp;\r\n};\r\n","const localizedNavigation = require(\"../i18n/navigation\");\r\nconst path = require(\"path\");\r\n\r\nconst pagePath = (pageIndex) => (pageIndex >= 1 ? `/${pageIndex}` : \"\");\r\n\r\nconst getTagsPath = (languageCode) =>\r\n  localizedNavigation.pages.tags[languageCode].path;\r\nconst getCreaturesPath = (languageCode) =>\r\n  localizedNavigation.pages.creatures[languageCode].path;\r\nconst getSearchPath = (languageCode) =>\r\n  localizedNavigation.pages.search[languageCode].path;\r\n\r\nconst removeSpecialCharacters = (s) => s.replace(/\\s/g, \"\");\r\n\r\nexports.getTagsPath = getTagsPath;\r\nexports.getCreaturesPath = getCreaturesPath;\r\nexports.getSearchPath = getSearchPath;\r\n\r\nexports.localizedSlug = ({ isDefault, locale, slug, isPage }) => {\r\n  if (isPage) {\r\n    return isDefault ? `/${slug}` : `/${locale}/${slug}`;\r\n  }\r\n\r\n  const creaturesPath = getCreaturesPath(locale);\r\n\r\n  return isDefault\r\n    ? `${creaturesPath}/${slug}`\r\n    : `/${locale + creaturesPath}/${slug}`;\r\n};\r\n\r\nexports.getTagUrl = (tag, languageCode) =>\r\n  `${getTagsPath(languageCode)}#${removeSpecialCharacters(tag)}`;\r\n\r\nexports.getTagValueUrl = (tag, value, languageCode, pageIndex) => {\r\n  if (!tag || !value) return null;\r\n  const url = `${getSearchPath(languageCode)}/${removeSpecialCharacters(\r\n    tag,\r\n  ).toLowerCase()}/${removeSpecialCharacters(value).toLowerCase()}`;\r\n  return url + pagePath(pageIndex);\r\n};\r\n\r\nexports.getCreatureUrl = (creatureName, languageCode) => {\r\n  return `${getCreaturesPath(languageCode)}/${removeSpecialCharacters(\r\n    creatureName,\r\n  )}`;\r\n};\r\n\r\nexports.getCreaturesUrl = (pageIndex, languageCode) => {\r\n  return getCreaturesPath(languageCode) + pagePath(pageIndex);\r\n};\r\n\r\nexports.getNameFromPath = (value) => {\r\n  const nameWithLanguage = path.basename(value, \".md\");\r\n  const name = nameWithLanguage.slice(0, -3); //\".en\".length = 3\r\n  const language = nameWithLanguage.slice(-2); //\"en\".length = 2\r\n\r\n  return {\r\n    name,\r\n    language,\r\n  };\r\n};\r\n"],"names":["module","exports","arr","len","length","i","arr2","Array","__esModule","arrayLikeToArray","isArray","iter","Symbol","iterator","from","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","assertPath","path","JSON","stringify","normalizeStringPosix","allowAboveRoot","code","res","lastSegmentLength","lastSlash","dots","charCodeAt","lastSlashIndex","lastIndexOf","posix","resolve","cwd","resolvedPath","resolvedAbsolute","arguments","undefined","process","normalize","isAbsolute","trailingSeparator","join","joined","arg","relative","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","_format","parse","ret","delimiter","win32","array","languageCode","valueSelector","x","temp","sort","a","b","localeCompare","localizedNavigation","require","pagePath","pageIndex","getTagsPath","pages","tags","getCreaturesPath","creatures","getSearchPath","search","removeSpecialCharacters","s","replace","tag","value","toLowerCase"],"sourceRoot":""}