{"version":3,"file":"component---src-templates-creatures-js-f5aef81eda7119ac91b5.js","mappings":"iLACO,I,kDC+CP,EA/BqB,SAACA,GACpB,IAAMC,EAAYD,EAAME,MAElBC,GAAYC,EAAAA,EAAAA,GAA2BH,GAEvCC,GADSG,EAAAA,EAAAA,KACMC,MAAK,SAACC,GAAD,OAASA,EAAIC,OAASL,KAEhD,OACE,gBAACM,EAAA,EAAD,CAAeC,UCpBa,0CDoBkBC,GAAIX,EAAMY,MACtD,2BAASF,UCzBW,qCD0BlB,gBAAC,EAAAG,EAAD,CACEH,UCxBuB,2CDyBvBR,MAAOA,EAAMA,MACbY,IAAKd,EAAMe,QAEb,uBAAKL,UC9BsB,8CD+BzB,sBAAIA,UC3BmB,4CD2BcV,EAAMe,OAC3C,qBAAGL,UC/B0B,kDD+BaV,EAAMgB,iB,oBEI1D,EA9BiB,SAAChB,GAChB,IAAQiB,EAAaC,EAAAA,WAAiBC,EAAAA,GAA9BF,SAER,OACE,2BAASP,UHXS,iCGYfV,EAAMoB,MAAMC,KACX,oBACEC,KADF,IAEIC,YAAeC,EAFnB,EAEmBA,KAAMR,EAFzB,EAEyBA,YAAaD,EAFtC,EAEsCA,MAAOb,EAF7C,EAE6CA,MAC/BU,EAHd,EAGIa,OAAUb,KAHd,OAME,gBAAC,EAAD,CACEc,IAAKd,EACLA,MAASe,EAAAA,EAAAA,IAAiBV,EAASW,MAA/B,IAAwChB,EAC5CY,KAAMA,EACNT,MAAOA,EACPC,YAAaA,EACbd,MAAOA,U,qDCzBZ,I,UCYP,EARkB,SAACF,GACjB,OAAO,sBAAIU,UDLM,8BCKaV,EAAM6B,Q,wHCsCtC,EArCmB,SAAC7B,GAClB,IAAM8B,GAAeC,EAAAA,EAAAA,KAEfC,EAAUhC,EAAMiC,YAAc,EAC9BC,EAAsB,IAAZF,EACVG,EAASH,IAAYhC,EAAMoC,SAEjC,OACE,uBAAK1B,UCde,mCDelB,0BACIwB,GACA,gBAACzB,EAAA,EAAD,CAAeE,GAAIX,EAAMqC,UAAzB,KACKP,EAAaQ,OAItB,yBACGN,EADH,IACaF,EAAaS,GAD1B,IAC+BvC,EAAMoC,UAErC,0BACID,GACA,gBAAC1B,EAAA,EAAD,CAAeE,GAAIX,EAAMwC,UACtBV,EAAaW,KADhB,S,6BEwBV,EAxCkB,SAACzC,GACjB,IAAQiB,EAAaC,EAAAA,WAAiBC,EAAAA,GAA9BF,SAGR,EAAkCjB,EAAM0C,YAAhCT,EAAR,EAAQA,YAAaG,EAArB,EAAqBA,SACfC,GAAWM,EAAAA,EAAAA,IAAgBV,EAAc,EAAGhB,EAASW,MACrDY,GAAWG,EAAAA,EAAAA,IAAgBV,EAAc,EAAGhB,EAASW,MACrDR,EAAQpB,EAAM4C,KAAKC,kBAAkBC,MACrChB,GAAeC,EAAAA,EAAAA,KAErB,OACE,gCACE,gBAAC,IAAD,CAAKhB,MAAOe,EAAaiB,qBACzB,gBAACC,EAAA,EAAD,CAAWnB,KAAMC,EAAaiB,qBAC9B,gBAACE,EAAA,EAAD,CAAU7B,MAAOA,IACjB,gBAAC,EAAD,CACEa,YAAaA,EACbG,SAAUA,EACVC,SAAUA,EACVG,SAAUA","sources":["webpack://catskald-legendary-creatures/./src/components/PageList/index.module.scss","webpack://catskald-legendary-creatures/./src/components/CreaturePage/index.js","webpack://catskald-legendary-creatures/./src/components/CreaturePage/index.module.scss","webpack://catskald-legendary-creatures/./src/components/PageList/index.js","webpack://catskald-legendary-creatures/./src/components/TitlePage/index.module.scss","webpack://catskald-legendary-creatures/./src/components/TitlePage/index.js","webpack://catskald-legendary-creatures/./src/components/Pagination/index.js","webpack://catskald-legendary-creatures/./src/components/Pagination/index.module.scss","webpack://catskald-legendary-creatures/./src/templates/creatures.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var pageList = \"index-module--pageList--NxycA\";","import {\r\n  creaturePage__link,\r\n  creaturePage__image,\r\n  creaturePage,\r\n  creaturePage__content,\r\n  creaturePage__title,\r\n  creaturePage__description,\r\n} from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\n\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport { useImages } from \"../../hooks/use-images\";\r\nimport { getImageNameOrDefaultCover } from \"../../utils/image-helpers\";\r\n\r\nconst CreaturePage = (props) => {\r\n  const imagePath = props.image;\r\n\r\n  const imageName = getImageNameOrDefaultCover(imagePath);\r\n  const images = useImages();\r\n  const image = images.find((img) => img.name === imageName);\r\n\r\n  return (\r\n    <LocalizedLink className={creaturePage__link} to={props.slug}>\r\n      <section className={creaturePage}>\r\n        <GatsbyImage\r\n          className={creaturePage__image}\r\n          image={image.image}\r\n          alt={props.title}\r\n        />\r\n        <div className={creaturePage__content}>\r\n          <h3 className={creaturePage__title}>{props.title}</h3>\r\n          <p className={creaturePage__description}>{props.description}</p>\r\n        </div>\r\n      </section>\r\n    </LocalizedLink>\r\n  );\r\n};\r\n\r\nCreaturePage.propTypes = {\r\n  slug: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default CreaturePage;\r\n","// extracted by mini-css-extract-plugin\nexport var creaturePage = \"index-module--creaturePage--mOS4j\";\nexport var creaturePage__content = \"index-module--creaturePage__content--v+JkI\";\nexport var creaturePage__description = \"index-module--creaturePage__description--a-1Ah\";\nexport var creaturePage__image = \"index-module--creaturePage__image--LgbNc\";\nexport var creaturePage__link = \"index-module--creaturePage__link--nYzyE\";\nexport var creaturePage__title = \"index-module--creaturePage__title--za9+q\";","import { pageList } from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CreaturePage from \"../CreaturePage\";\r\nimport { LocaleContext } from \"../Layout\";\r\nimport { getCreaturesPath } from \"../../utils/url-helpers\";\r\n\r\nconst PageList = (props) => {\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  return (\r\n    <section className={pageList}>\r\n      {props.pages.map(\r\n        ({\r\n          node: {\r\n            frontmatter: { date, description, title, image },\r\n            fields: { slug },\r\n          },\r\n        }) => (\r\n          <CreaturePage\r\n            key={slug}\r\n            slug={`${getCreaturesPath(language.code)}/${slug}`}\r\n            date={date}\r\n            title={title}\r\n            description={description}\r\n            image={image}\r\n          />\r\n        ),\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nPageList.propTypes = {\r\n  pages: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default PageList;\r\n","// extracted by mini-css-extract-plugin\nexport var title = \"index-module--title--wvjv4\";","import { title } from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TitlePage = (props) => {\r\n  return <h1 className={title}>{props.text}</h1>;\r\n};\r\n\r\nTitlePage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TitlePage;\r\n","import { pagination } from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport useTranslations from \"../../i18n/translations/useTranslations\";\r\n\r\nconst Pagination = (props) => {\r\n  const translations = useTranslations();\r\n\r\n  const current = props.currentPage + 1;\r\n  const isFirst = current === 1;\r\n  const isLast = current === props.numPages;\r\n\r\n  return (\r\n    <div className={pagination}>\r\n      <p>\r\n        {!isFirst && (\r\n          <LocalizedLink to={props.prevPage}>\r\n            ← {translations.Prev}\r\n          </LocalizedLink>\r\n        )}\r\n      </p>\r\n      <p>\r\n        {current} {translations.of} {props.numPages}\r\n      </p>\r\n      <p>\r\n        {!isLast && (\r\n          <LocalizedLink to={props.nextPage}>\r\n            {translations.Next} →\r\n          </LocalizedLink>\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  currentPage: PropTypes.number.isRequired,\r\n  numPages: PropTypes.number.isRequired,\r\n  prevPage: PropTypes.string,\r\n  nextPage: PropTypes.string,\r\n};\r\n\r\nexport default Pagination;\r\n","// extracted by mini-css-extract-plugin\nexport var pagination = \"index-module--pagination--rjAMM\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { graphql } from \"gatsby\";\r\n\r\nimport TitlePage from \"../components/TitlePage\";\r\nimport PageList from \"../components/PageList\";\r\nimport Pagination from \"../components/Pagination\";\r\nimport SEO from \"../components/seo\";\r\nimport useTranslations from \"../i18n/translations/useTranslations\";\r\nimport { LocaleContext } from \"../components/Layout\";\r\nimport { getCreaturesUrl } from \"../utils/url-helpers\";\r\n\r\nconst Creatures = (props) => {\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  // Logic for Pagination Component\r\n  const { currentPage, numPages } = props.pageContext;\r\n  const prevPage = getCreaturesUrl(currentPage - 1, language.code);\r\n  const nextPage = getCreaturesUrl(currentPage + 1, language.code);\r\n  const pages = props.data.allMarkdownRemark.edges;\r\n  const translations = useTranslations();\r\n\r\n  return (\r\n    <>\r\n      <SEO title={translations.CreaturesPageTitle} />\r\n      <TitlePage text={translations.CreaturesPageTitle} />\r\n      <PageList pages={pages} />\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        numPages={numPages}\r\n        prevPage={prevPage}\r\n        nextPage={nextPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nCreatures.propTypes = {\r\n  pageContext: PropTypes.object.isRequired,\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.object.isRequired,\r\n          }),\r\n        }).isRequired,\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Creatures;\r\n\r\nexport const query = graphql`\r\n  query Creatures(\r\n    $locale: String!\r\n    $dateFormat: String!\r\n    $skip: Int!\r\n    $limit: Int!\r\n    $origin: String = \"*\"\r\n    $taxonomy: String = \"*\"\r\n    $shapeshifting: String = \"*\"\r\n    $activityTime: String = \"*\"\r\n    $voice: String = \"*\"\r\n    $character: String = \"*\"\r\n    $appearance: String = \"*\"\r\n    $clothes: String = \"*\"\r\n    $paraphernalia: String = \"*\"\r\n    $number: String = \"*\"\r\n    $habitat: String = \"*\"\r\n  ) {\r\n    allMarkdownRemark(\r\n      filter: {\r\n        fields: { locale: { eq: $locale } }\r\n        frontmatter: {\r\n          page: { eq: null }\r\n          origin: { elemMatch: { value: { glob: $origin } } }\r\n          taxonomy: { elemMatch: { value: { glob: $taxonomy } } }\r\n          shapeshifting: { elemMatch: { value: { glob: $shapeshifting } } }\r\n          activityTime: { elemMatch: { value: { glob: $activityTime } } }\r\n          voice: { elemMatch: { value: { glob: $voice } } }\r\n          character: { elemMatch: { value: { glob: $character } } }\r\n          appearance: { elemMatch: { value: { glob: $appearance } } }\r\n          clothes: { elemMatch: { value: { glob: $clothes } } }\r\n          paraphernalia: { elemMatch: { value: { glob: $paraphernalia } } }\r\n          number: { elemMatch: { value: { glob: $number } } }\r\n          habitat: { elemMatch: { value: { glob: $habitat } } }\r\n        }\r\n      }\r\n      sort: { fields: frontmatter___date, order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            description\r\n            image\r\n            date(formatString: $dateFormat)\r\n          }\r\n          fields {\r\n            locale\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["props","imagePath","image","imageName","getImageNameOrDefaultCover","useImages","find","img","name","LocalizedLink","className","to","slug","G","alt","title","description","language","React","LocaleContext","pages","map","node","frontmatter","date","fields","key","getCreaturesPath","code","text","translations","useTranslations","current","currentPage","isFirst","isLast","numPages","prevPage","Prev","of","nextPage","Next","pageContext","getCreaturesUrl","data","allMarkdownRemark","edges","CreaturesPageTitle","TitlePage","PageList"],"sourceRoot":""}