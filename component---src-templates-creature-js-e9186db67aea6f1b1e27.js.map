{"version":3,"file":"component---src-templates-creature-js-e9186db67aea6f1b1e27.js","mappings":"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","sources":["webpack://catskald-legendary-creatures/./src/hooks/use-images.js","webpack://catskald-legendary-creatures/./src/components/CreatureCard/index.module.scss","webpack://catskald-legendary-creatures/./node_modules/@styled-icons/boxicons-logos/Wikipedia/Wikipedia.esm.js","webpack://catskald-legendary-creatures/./src/components/CreatureCard/index.js","webpack://catskald-legendary-creatures/./src/templates/creature.js","webpack://catskald-legendary-creatures/./src/utils/image-helpers.js"],"sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nexport const useImages = () => {\r\n  const { listImages } = useStaticQuery(\r\n    graphql`\r\n      {\r\n        listImages: allFile(\r\n          filter: { sourceInstanceName: { eq: \"image-assets\" } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              childImageSharp {\r\n                image: gatsbyImageData(layout: CONSTRAINED)\r\n                metadata: parent {\r\n                  ... on File {\r\n                    relativePath\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `,\r\n  );\r\n  return listImages.edges.map((edge) => ({\r\n    name: edge.node.childImageSharp.metadata.relativePath,\r\n    image: edge.node.childImageSharp.image,\r\n  }));\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport var card = \"index-module--card--ib-L9\";\nexport var card__buttons = \"index-module--card__buttons--MmNrt\";\nexport var card__container = \"index-module--card__container--TxxIV\";\nexport var card__content = \"index-module--card__content--cEAnE\";\nexport var card__header = \"index-module--card__header--R7HLE\";\nexport var card__hint = \"index-module--card__hint--pjy6C\";\nexport var card__image = \"index-module--card__image---I1xm\";\nexport var card__row = \"index-module--card__row--6mOCb\";\nexport var card__row__item = \"index-module--card__row__item--VaBU5\";\nexport var card__title = \"index-module--card__title--CKykD\";","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { StyledIconBase } from '@styled-icons/styled-icon';\nexport var Wikipedia = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(StyledIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 24 24\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.081 12.932c-.78 1.611-1.849 3.792-2.379 4.776-.513.896-.94.776-1.278.024-1.172-2.77-3.58-7.625-4.712-10.347-.209-.502-.367-.823-.516-.95-.151-.125-.462-.2-.936-.227-.174-.019-.26-.061-.26-.131v-.379l.043-.038c.771-.004 4.503 0 4.503 0l.042.038v.362c0 .1-.063.147-.188.147l-.47.024c-.403.026-.605.137-.605.365 0 .112.044.275.139.501.902 2.206 4.017 8.772 4.017 8.772l.114.039 2.01-4.012-.402-.89L9.82 8.285s-.265-.545-.357-.727c-.607-1.203-.593-1.265-1.206-1.347-.173-.02-.261-.042-.261-.125v-.39l.05-.037h3.578l.095.03v.376c0 .088-.063.125-.189.125l-.257.039c-.66.051-.551.318-.113 1.186l1.319 2.712 1.465-2.922c.244-.533.194-.668.093-.789-.058-.07-.255-.185-.677-.2l-.168-.018a.191.191 0 0 1-.121-.043.125.125 0 0 1-.056-.107v-.357l.051-.037c1.04-.007 3.371 0 3.371 0l.05.037v.364c0 .101-.05.148-.161.148-.539.024-.652.079-.854.366-.1.154-.313.49-.538.865l-1.919 3.563-.054.112 2.328 4.763.142.041 3.665-8.704c.129-.352.107-.602-.053-.746-.165-.144-.289-.228-.716-.246l-.35-.014a.211.211 0 0 1-.127-.037.128.128 0 0 1-.06-.1v-.361l.049-.038h4.137l.034.038v.364c0 .1-.062.15-.174.15-.541.024-.94.15-1.203.351-.263.213-.465.514-.614.89 0 0-3.371 7.72-4.524 10.289-.438.84-.878.765-1.253-.026-.477-.977-1.478-3.156-2.206-4.761l.045-.03z\"\n  }));\n});\nWikipedia.displayName = 'Wikipedia';\nexport var WikipediaDimensions = {\n  height: 24,\n  width: 24\n};","import {\r\n  card__container,\r\n  card,\r\n  card__image,\r\n  card__title,\r\n  card__content,\r\n  card__header,\r\n  card__row,\r\n  card__row__item,\r\n  card__buttons,\r\n  card__hint,\r\n} from \"./index.module.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\nimport { Wikipedia } from \"@styled-icons/boxicons-logos/Wikipedia\";\r\n\r\nimport useTranslations from \"../../i18n/translations/useTranslations\";\r\nimport { useImages } from \"../../hooks/use-images\";\r\nimport LocalizedLink from \"../LocalizedLink\";\r\nimport { LocaleContext } from \"../Layout\";\r\nimport { noTag } from \"../../configuration\";\r\nimport { supportedTags } from \"../../i18n/navigation\";\r\nimport { localizedSort } from \"../../utils/array-helpers\";\r\nimport { getImageNameOrDefaultCover } from \"../../utils/image-helpers\";\r\nimport { getCreatureUrl, getNameFromPath } from \"../../utils/url-helpers\";\r\nimport { getTagUrl, getTagValueUrl } from \"../../utils/url-helpers\";\r\n\r\nconst CreatureCard = (props) => {\r\n  const translations = useTranslations();\r\n  const { language } = React.useContext(LocaleContext);\r\n\r\n  const imageName = getImageNameOrDefaultCover(props.frontmatter.image);\r\n  const images = useImages();\r\n  const image = images.find((img) => img.name === imageName);\r\n\r\n  return (\r\n    <div className={card__container}>\r\n      <div className={card}>\r\n        <GatsbyImage\r\n          className={card__image}\r\n          image={image.image}\r\n          alt={props.frontmatter.title}\r\n        />\r\n        <table className={card__content}>\r\n          <caption className={card__title}>\r\n            <span>{props.frontmatter.title}</span>\r\n          </caption>\r\n          <tbody>\r\n            {localizedSort(\r\n              supportedTags.map((tag) => ({\r\n                tag: translations[tag],\r\n                values: props.frontmatter[tag],\r\n              })),\r\n              language.code,\r\n              (x) => x.tag,\r\n            ).map(({ tag, values }) => (\r\n              <CardRow\r\n                tag={tag}\r\n                data={values}\r\n                language={language}\r\n                sometimesText={translations[\"sometimes\"]}\r\n                key={tag}\r\n              />\r\n            ))}\r\n            <RelatedCreatures\r\n              data={props.frontmatter}\r\n              label={translations.related}\r\n              language={language}\r\n            />\r\n          </tbody>\r\n        </table>\r\n        <CardButtons data={props.frontmatter} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CardRow = (props) => {\r\n  if (!props.data) return null;\r\n\r\n  let data = Array.isArray(props.data) ? props.data : [props.data];\r\n  data = data.filter((x) => x && x.value !== noTag);\r\n  if (data.length === 0) return null;\r\n\r\n  data = localizedSort(data, props.language.code, (x) => x.value);\r\n  const tagUrl = getTagUrl(props.tag, props.language.code);\r\n\r\n  return (\r\n    <tr>\r\n      <th className={card__header}>\r\n        <LocalizedLink to={tagUrl}>{props.tag}</LocalizedLink>\r\n      </th>\r\n      <td className={card__row}>\r\n        {data.map((category, index) => {\r\n          const tagValueUrl = getTagValueUrl(\r\n            props.tag,\r\n            category.value,\r\n            props.language.code,\r\n          );\r\n\r\n          let comment = \"\";\r\n          if (category.comment && category.sometimes)\r\n            comment = `${props.sometimesText}, ${category.comment}`;\r\n          else if (category.comment) comment = category.comment;\r\n          else if (category.sometimes) comment = props.sometimesText;\r\n\r\n          return (\r\n            <span key={props.tag + index} className={card__row__item}>\r\n              <LocalizedLink to={tagValueUrl}>{category.value}</LocalizedLink>\r\n              <span className={card__hint}>\r\n                {comment ? ` (${comment})` : \"\"}\r\n              </span>\r\n            </span>\r\n          );\r\n        })}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst RelatedCreatures = (props) => {\r\n  if (!props.data.related || props.data.related.length === 0) return <></>;\r\n\r\n  let creatureLinks = props.data.related.map((path) => {\r\n    var name = getNameFromPath(path).name;\r\n    return {\r\n      name: name, //TODO capitalization\r\n      link: getCreatureUrl(name, props.language.code),\r\n    };\r\n  });\r\n  creatureLinks = localizedSort(\r\n    creatureLinks,\r\n    props.language.code,\r\n    (x) => x.name,\r\n  );\r\n\r\n  return (\r\n    <tr>\r\n      <th className={card__header}>{props.label}</th>\r\n      <td className={card__row}>\r\n        {creatureLinks.map(({ name, link }) => (\r\n          <span className={card__row__item} key={name}>\r\n            <LocalizedLink to={link}>{name}</LocalizedLink>\r\n          </span>\r\n        ))}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nconst CardButtons = (props) => {\r\n  const anyButtons = props.data.wikipedia;\r\n  if (!anyButtons) return <></>;\r\n\r\n  return (\r\n    <div className={card__buttons}>\r\n      {props.data.wikipedia && (\r\n        <a\r\n          href={props.data.wikipedia}\r\n          title=\"Wikipedia\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Wikipedia />\r\n        </a>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCreatureCard.propTypes = {\r\n  frontmatter: PropTypes.object.isRequired,\r\n};\r\n\r\nconst languageShape = {\r\n  code: PropTypes.string.isRequired,\r\n};\r\nconst categoryShape = {\r\n  value: PropTypes.string.isRequired,\r\n  comment: PropTypes.string,\r\n  sometimes: PropTypes.bool,\r\n};\r\nCardRow.propTypes = {\r\n  tag: PropTypes.string.isRequired,\r\n  data: PropTypes.oneOfType([\r\n    PropTypes.shape(categoryShape),\r\n    PropTypes.arrayOf(PropTypes.shape(categoryShape)),\r\n  ]),\r\n  language: PropTypes.shape(languageShape).isRequired,\r\n  sometimesText: PropTypes.string.isRequired,\r\n};\r\n\r\nCardButtons.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n};\r\n\r\nRelatedCreatures.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  language: PropTypes.shape(languageShape).isRequired,\r\n  data: PropTypes.shape({\r\n    related: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  }).isRequired,\r\n};\r\n\r\nexport default CreatureCard;\r\n","import \"../styles/markdown.scss\";\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { graphql } from \"gatsby\";\r\nimport CreatureCard from \"../components/CreatureCard\";\r\nimport SEO from \"../components/seo\";\r\n\r\nconst Creature = (props) => {\r\n  const content = props.data.markdownRemark;\r\n\r\n  return (\r\n    <>\r\n      <SEO\r\n        title={content.frontmatter.title}\r\n        description={content.frontmatter.description}\r\n        image={content.frontmatter.image}\r\n      />\r\n      <section className=\"markdown\">\r\n        <CreatureCard frontmatter={content.frontmatter} />\r\n        <div dangerouslySetInnerHTML={{ __html: content.html }}></div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nCreature.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          node: PropTypes.shape({\r\n            frontmatter: PropTypes.object.isRequired,\r\n          }),\r\n        }).isRequired,\r\n      ),\r\n    }),\r\n  }),\r\n};\r\n\r\nexport default Creature;\r\n\r\nexport const query = graphql`\r\n  query Creature($locale: String!, $id: String!) {\r\n    markdownRemark(\r\n      frontmatter: { id: { eq: $id } }\r\n      fields: { locale: { eq: $locale } }\r\n    ) {\r\n      frontmatter {\r\n        title\r\n        names {\r\n          name\r\n          plural\r\n          language\r\n        }\r\n        description\r\n        related\r\n        origin {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        taxonomy {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        shapeshifting {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        activityTime {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        voice {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        character {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        appearance {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        clothes {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        paraphernalia {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        number {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        habitat {\r\n          value\r\n          comment\r\n          sometimes\r\n        }\r\n        wikipedia\r\n        image\r\n      }\r\n      html\r\n    }\r\n  }\r\n`;\r\n","exports.getImageNameOrDefaultCover = (imagePath) =>\r\n  imagePath ? imagePath.split(\"\\\\\").pop().split(\"/\").pop() : \"cover.jpg\";\r\n"],"names":["useImages","useStaticQuery","listImages","edges","map","edge","name","node","childImageSharp","metadata","relativePath","image","card__header","card__row","card__row__item","Wikipedia","props","ref","iconAttrs","iconVerticalAlign","iconViewBox","d","displayName","CardRow","data","Array","isArray","filter","x","value","noTag","length","localizedSort","language","code","tagUrl","getTagUrl","tag","className","LocalizedLink","to","category","index","tagValueUrl","getTagValueUrl","comment","sometimes","sometimesText","key","RelatedCreatures","related","creatureLinks","path","getNameFromPath","link","getCreatureUrl","label","CardButtons","wikipedia","href","title","target","rel","translations","useTranslations","React","LocaleContext","imageName","getImageNameOrDefaultCover","frontmatter","find","img","G","alt","supportedTags","values","content","markdownRemark","description","dangerouslySetInnerHTML","__html","html","exports","imagePath","split","pop"],"sourceRoot":""}